package bot

import (
	"fmt"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var AwaitMessage = map[string]string{
	"start_admin": `
	__________RGL__Mode__________
	/rgl - –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º –°–∫–∞—É—Ç–∞–º !
	/stats - –û–±—à–∞—è —Å—Ç–∞—Ç–∏—Å–∫–∞ - "–ü–µ—Ä–µ–º—â–µ–Ω–∏—è", "–§–æ—Ç–æ–≥—Ä–∞—Ü–∏–∏", "–ß–∞—Å—ã","–ü—Ä–æ—ë–±—ã" (—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±—Ä–æ—Å–∞)
	/restats - –°–±—Ä–æ—Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å–∫–∏
	`,
	"start_scaut": `
	__________Scaut__Mode__________
	/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å–º–µ–Ω–µ (–ù–µ —Å–±—Ä–∞—Å—ã–≤–∞—è —Å–º–µ–Ω—É)!
	/report - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã !
	/sub - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ç—á—ë—Ç (–ø—Ä–∏—à–ª—ë—Ç –æ—Ç—á—ë—Ç –≤ –ª—Å –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 1.5 —á–∞—Å–∞).
	`,
}

func (b *Bot) CMDHanlder(msg tgbotapi.Message) {
	b.wg.Add(1)
	switch msg.Command() {
	case "start":
		go b.CMDStart(msg)

	case "info":
		go b.CMDInfo(msg)

	case "report":
		go b.CMDReport(msg)
	case "sub":
		b.CMDSubs(msg)
	default:
		if b.cfg.Admins[msg.From.ID] {
			switch msg.Command() {
			case "rgl":
				go b.CMDRgl(msg)
			case "stats":
				go b.CMDStats(msg)

			case "restats":
				go b.CMDRestats(msg)

			default:
				b.bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–ù–µ –ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ \n/start -–î–ª—è –ø—Ä–æ—Å–º—Ç–æ—Ä–∞ –∫–æ–º–º–∞–Ω–¥"))
			}

		}

	}
}

func (b *Bot) CMDStart(msg tgbotapi.Message) {
	defer b.wg.Done()

	if !b.cfg.Admins[msg.From.ID] {
		b.bot.Send(tgbotapi.NewMessage(msg.Chat.ID, AwaitMessage["start_scaut"]))
	}
	b.bot.Send(tgbotapi.NewMessage(msg.Chat.ID, AwaitMessage["start_admin"]))
}

func (b *Bot) CMDSubs(msg tgbotapi.Message) {
	subber, ok := Subs[msg.From.UserName]
	if ok {
		if subber == 0 {
			Subs[msg.From.UserName] = msg.Chat.ID
			b.bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã –Ω–∞ –æ—Ç—á—ë—Ç—ã :)"))
			return
		}
		Subs[msg.From.UserName] = 0
		b.bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ—Ç—á—ë—Ç—ã :)"))
		return
	}
	Subs[msg.From.UserName] = msg.Chat.ID
	b.bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–í—ã –ø–æ—Ç–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ—Ç—á—ë—Ç—ã :)"))

}

func (b *Bot) CMDRgl(msg tgbotapi.Message) {
	b.muScauts.Lock()
	defer b.wg.Done()
	defer b.muScauts.Unlock()

	message := tgbotapi.NewMessage(msg.Chat.ID, "")
	for _, value := range Scauts {
		if value.FirstTime.IsZero() {
			continue
		}
		start := value.TimeStart
		lastReport := b.getTimeReport(start)
		firstReport := b.getTimeReport(value.FirstTime)

		message.Text += fmt.Sprintf("@%s:üôà\n–ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª: %d\n–ù–∞–≤—ë–ª –ø–æ—Ä—è–¥–æ–∫: %d\n–û—Ç—á—ë—Ç—ã –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç: %d\n–ü–µ—Ä–≤—ã–π –æ—Ç—á—ë—Ç: %s\n–ü–æ–ª—Å–ª–µ–¥–Ω–∏–π –æ—Ç—ë—Ç: %s\n\n",
			value.UserName, value.Moved, value.Images, value.Lateness, firstReport, lastReport,
		)
	}
	b.bot.Send(message)
}

func (b *Bot) CMDReport(msg tgbotapi.Message) {
	b.muScauts.Lock()
	defer b.wg.Done()
	defer b.muScauts.Unlock()

	scaut := Scauts[msg.From.ID]

	// RGL Messsage
	if scaut.UserName != "" {
		MsgForAdmin := tgbotapi.NewMessage(b.cfg.AdminChannel, "")

		MsgForAdmin.Text = fmt.Sprintf("@%s:\n–°–º–µ–Ω—É –∑–∞–≤–µ—Ä—à–∏–ª: %s.c%s-%s (%s)\n–ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª: %d\n–ù–∞–≤—ë–ª –ø–æ—Ä—è–¥–æ–∫: %d\n–û—Ç—á—ë—Ç—ã –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç: %d\n\n",
			scaut.UserName, getDate(),
			b.getTimeReport(scaut.FirstTime), b.getTimeReport(scaut.TimeStart), scaut.TimeStart.Sub(scaut.FirstTime).String(),
			scaut.Moved, scaut.Images, scaut.Lateness,
		)
		b.bot.Send(MsgForAdmin)
	}

	// SCAUT Message
	sumHour := strings.Split(scaut.TimeStart.Sub(scaut.FirstTime).String(), "h")
	message := tgbotapi.NewMessage(msg.Chat.ID, "")

	message.Text = fmt.Sprintf("–°–º–µ–Ω—É –∑–∞–≤–µ—Ä—à–∏–ª %s.c %s-%s (%s –ß–∞—Å–æ–≤)\nüîÅ–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: %d \n‚úÖ–ù–∞–≤—ë–ª –ø–æ—Ä—è–¥–æ–∫: %d \n–ò—Ç–æ–≥–æ: %d", getDate(),
		b.getTimeReport(scaut.FirstTime), b.getTimeReport(scaut.TimeStart), sumHour[0],
		scaut.Moved, scaut.Images, scaut.Lateness,
	)
	b.AddStat(scaut, msg.From.ID)
	Scauts[msg.From.ID] = Scaut{}

	b.bot.Send(message)

}
func (b *Bot) CMDInfo(msg tgbotapi.Message) {
	b.muScauts.Lock()
	defer b.wg.Done()
	defer b.muScauts.Unlock()

	user := Scauts[msg.From.ID]
	message := tgbotapi.NewMessage(msg.Chat.ID, "")

	message.Text = fmt.Sprintf("–°–º–µ–Ω—É –∑–∞–≤–µ—Ä—à–∏–ª %s.c %s-%s (%s)\nüîÅ–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: %d \n‚úÖ–ù–∞–≤—ë–ª –ø–æ—Ä—è–¥–æ–∫: %d \n–ò—Ç–æ–≥–æ: %d",
		getDate(), b.getTimeReport(user.FirstTime), b.getTimeReport(user.TimeStart),
		user.TimeStart.Sub(user.FirstTime).String(),
		user.Moved, user.Images, user.Moved+user.Images,
	)
	b.bot.Send(message)
}

func (b *Bot) CMDStats(msg tgbotapi.Message) {
	b.muStats.Lock()
	defer b.wg.Done()
	defer b.muStats.Unlock()

	message := tgbotapi.NewMessage(msg.Chat.ID, "–û–±—â–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞!\n\n")
	for _, value := range StatScauts {
		if value.UserName != "" {
			message.Text += fmt.Sprintf("@%s\n–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–π: %d\n–û–ø–æ–∑–¥–∞–Ω–∏–π: %d\n–í—Å–µ–≥–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª: (%d)\n\n", value.UserName, value.SummerMuved, value.SummerLateness, value.SummerHour)
		}
	}
	b.bot.Send(message)

}

func (b *Bot) CMDRestats(msg tgbotapi.Message) {
	b.muStats.Lock()
	defer b.wg.Done()
	defer b.muStats.Unlock()
	for key, _ := range StatScauts {
		_, ok := StatScauts[key]
		if ok {
			StatScauts[key] = WendayScaut{}
		}
	}
	b.bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞ !"))
}
