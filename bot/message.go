package bot

import (
	"fmt"
	"strings"
	"time"
)

func (b *Bot) GenerateReportScaut(scaut Scaut) string {
	var result strings.Builder
	if scaut.UserName != "" {
		sumHour := strings.Split(scaut.TimeStart.Sub(scaut.FirstTime).String(), "h")
		result.WriteString(fmt.Sprintf(
			"–°–º–µ–Ω—É –∑–∞–≤–µ—Ä—à–∏–ª %s.c %s-%s (%s –ß–∞—Å–æ–≤)\n"+
				"üîÅ–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: %d\n"+
				"‚úÖ–ù–∞–≤—ë–ª –ø–æ—Ä—è–¥–æ–∫: %d\n"+
				"–ò—Ç–æ–≥–æ: %d\n",
			getDate(), b.getTimeReport(scaut.FirstTime),
			b.getTimeReport(scaut.TimeStart), sumHour[0],
			scaut.Moved, scaut.Images, scaut.Moved+scaut.Images,
		))
	}
	return result.String()
}

func (b *Bot) GenerateReportRGL(scaut Scaut) string {
	var result strings.Builder
	if scaut.UserName != "" {
		result.WriteString(fmt.Sprintf(
			"–°–º–µ–Ω—É –∑–∞–≤–µ—Ä—à–∏–ª %s.c %s-%s (%s –ß–∞—Å–æ–≤)\n"+
				"üîÅ–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: %d\n"+
				"‚úÖ–ù–∞–≤—ë–ª –ø–æ—Ä—è–¥–æ–∫: %d\n"+
				"‚è± –û—Ç—á—ë—Ç—ã –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç: %d\n",
			getDate(), b.getTimeReport(scaut.FirstTime),
			b.getTimeReport(scaut.TimeStart), scaut.TimeStart.Sub(scaut.FirstTime).String(),
			scaut.Moved, scaut.Images, scaut.Lateness,
		))
	}
	return result.String()
}

func (b *Bot) RGLStats(scouts map[int64]Scaut) string {
	var result strings.Builder
	result.WriteString("üìä *–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∫–∞—É—Ç–æ–≤:*\n\n")

	for _, scout := range scouts {
		if !scout.FirstTime.IsZero() {
			result.WriteString(fmt.Sprintf(
				"üë§ *@%s*\n"+
					"‚ûñ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–π: %d\n"+
					"‚ûñ –£–±–æ—Ä–æ–∫: %d\n"+
					"‚ûñ –û–ø–æ–∑–¥–∞–Ω–∏–π: %d\n"+
					"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %s - %s\n\n",
				scout.UserName,
				scout.Moved,
				scout.Images,
				scout.Lateness,
				b.getTimeReport(scout.FirstTime),
				b.getTimeReport(scout.TimeStart),
			))
		}
	}

	result.WriteString("_–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " + time.Now().Format("15:04") + "_")
	return result.String()
}

func GenerateStats(Stats map[int64]WendayScaut) string {
	var result strings.Builder
	result.WriteString("üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—É—Ç–æ–≤!*\n\n")

	for _, scout := range Stats {
		if scout.UserName != "" {
			result.WriteString(fmt.Sprintf(
				"üë§ *@%s*\n"+
					"‚ûñ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–π: %d\n"+
					"‚ûñ –û–ø–æ–∑–¥–∞–Ω–∏–π: %d\n"+
					"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: (%d –ß–∞–æ—Å–≤)\n\n",
				scout.UserName,
				scout.SummerMuved,
				scout.SummerLateness,
				scout.SummerHour,
			))
		}
	}
	return result.String()
}
